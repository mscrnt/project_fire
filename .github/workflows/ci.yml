name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run go fmt
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Please run 'go fmt ./...'"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        if: matrix.os != 'self-hosted'
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y stress-ng fio libgl1-mesa-dev xorg-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install stress-ng fio

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Installing Windows dependencies..."
          # Most Windows testing will use mocked/stubbed implementations
          # Real stress tools not easily available on Windows runners

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go test -v -tags=integration ./pkg/agent -run TestAgentIntegration
        env:
          CGO_ENABLED: 1

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        # Note: CGO disabled on Windows self-hosted runner (no gcc installed)
        # Race detector also disabled as it requires CGO
        run: |
          go test -v -coverprofile coverage.txt -covermode atomic ./...
          go test -v -tags=integration ./pkg/agent -run TestAgentIntegration
        env:
          CGO_ENABLED: 0

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary: bench
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary: bench
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary: bench.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary: bench
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary: bench
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags "-s -w -X main.version=${{ github.sha }}" -o ${{ matrix.binary }} ./cmd/fire
      
      - name: Install Linux GUI dependencies
        if: runner.os == 'Linux' && matrix.goarch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev
          
          
      - name: Build GUI binary (desktop platforms only)
        # Only build GUI for native arch (no cross-compilation with CGO)
        if: (matrix.os == 'ubuntu-latest' && matrix.goarch == 'amd64') || (matrix.os == 'windows-latest') || (matrix.os == 'macos-latest' && matrix.goarch == 'amd64')
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          # Build GUI only if directory exists
          if [ -d "./cmd/fire-gui" ]; then
            GUI_BINARY="fire-gui"
            if [ "${{ matrix.goos }}" = "windows" ]; then
              GUI_BINARY="fire-gui.exe"
            fi
            echo "Building GUI for ${{ matrix.goos }}/${{ matrix.goarch }}..."
            go build -ldflags "-s -w" -o $GUI_BINARY ./cmd/fire-gui
            echo "GUI build completed"
          else
            echo "GUI directory not found, skipping GUI build"
          fi

      - name: Compress binary
        if: runner.os != 'Windows'
        run: |
          if command -v upx >/dev/null 2>&1; then
            upx --best --lzma ${{ matrix.binary }} || true
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bench-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ matrix.binary }}
            fire-gui*
          retention-days: 7

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: bench-linux-amd64
          path: ./

      - name: Make binary executable
        run: chmod +x ./bench

      - name: Smoke test - version
        run: ./bench version || echo "Version command not implemented yet"

      - name: Smoke test - help
        run: ./bench --help || echo "Help command not implemented yet"

      - name: Basic functionality test
        run: |
          ./bench test --dry-run || echo "Test command not implemented yet"
          
      - name: Install OpenSSL (if needed)
        run: |
          # OpenSSL should be pre-installed on Ubuntu runners
          which openssl || sudo apt-get install -y openssl
          
      - name: Agent functionality test
        run: |
          # Test certificate initialization
          if ./bench cert init --force; then
            echo "Certificate initialization successful"
            
            # Generate test certificates with proper SANs
            cd ~/.fire/ca
            
            # Create server certificate with localhost SAN
            openssl genrsa -out server.key 2048
            printf '[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nCN = localhost\n[v3_req]\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = localhost\nIP.1 = 127.0.0.1\nIP.2 = ::1\n' > server.conf
            openssl req -new -key server.key -out server.csr -config server.conf
            openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.pem -days 1 -extensions v3_req -extfile server.conf
            
            # Create client certificate
            openssl genrsa -out client.key 2048
            openssl req -new -key client.key -out client.csr -subj "/CN=test-client"
            openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.pem -days 1
            
            # Start agent in background
            cd -
            ./bench agent serve --cert ~/.fire/ca/server.pem --key ~/.fire/ca/server.key --ca ~/.fire/ca/ca.crt &
            AGENT_PID=$!
            sleep 2
          else
            echo "Certificate command not implemented yet, skipping agent test"
            exit 0
          fi
          
          # Test agent connection
          ./bench agent connect --cert ~/.fire/ca/client.pem --key ~/.fire/ca/client.key --ca ~/.fire/ca/ca.crt --endpoint health
          
          # Stop agent
          kill $AGENT_PID
