name: Release Pipeline

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

env:
  GO_VERSION: '1.23'

jobs:
  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary: bench
            artifact: bench-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary: bench
            artifact: bench-linux-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary: bench.exe
            artifact: bench-windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary: bench
            artifact: bench-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary: bench
            artifact: bench-darwin-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.tag_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Linux GUI dependencies
        if: runner.os == 'Linux' && matrix.goarch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA="${{ github.sha }}"
          
          go build -ldflags "-s -w \
            -X main.buildVersion=${VERSION} \
            -X main.buildCommit=${COMMIT_SHA} \
            -X main.buildTime=${BUILD_TIME}" \
            -o ${{ matrix.binary }} ./cmd/fire

      - name: Install MinGW for Windows GUI build
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw -y
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

      - name: Build GUI binary (desktop platforms only)
        if: (matrix.os == 'ubuntu-latest' && matrix.goarch == 'amd64') || (matrix.os == 'windows-latest') || (matrix.os == 'macos-latest' && matrix.goarch == 'amd64')
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          GUI_BINARY="fire-gui"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            GUI_BINARY="fire-gui.exe"
          fi
          
          if [ -d "./cmd/fire-gui" ]; then
            echo "Building GUI for ${{ matrix.goos }}/${{ matrix.goarch }}..."
            go build -ldflags "-s -w" -o $GUI_BINARY ./cmd/fire-gui
          fi

      - name: Create release package
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="fire-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
          mkdir -p ${PACKAGE_NAME}
          
          # Copy binaries
          cp ${{ matrix.binary }} ${PACKAGE_NAME}/
          if [ -f "fire-gui" ] || [ -f "fire-gui.exe" ]; then
            cp fire-gui* ${PACKAGE_NAME}/ || true
          fi
          
          # Copy docs
          cp README.md LICENSE ${PACKAGE_NAME}/ || true
          
          # Create archive
          if [ "${{ matrix.goos }}" = "windows" ]; then
            7z a "${PACKAGE_NAME}.zip" ${PACKAGE_NAME}
            echo "ARCHIVE_PATH=${PACKAGE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${PACKAGE_NAME}.tar.gz" ${PACKAGE_NAME}
            echo "ARCHIVE_PATH=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Generate checksums
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            certUtil -hashfile ${{ env.ARCHIVE_PATH }} SHA256 > ${{ env.ARCHIVE_PATH }}.sha256
          else
            shasum -a 256 ${{ env.ARCHIVE_PATH }} > ${{ env.ARCHIVE_PATH }}.sha256
          fi

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.ARCHIVE_PATH }}
            ${{ env.ARCHIVE_PATH }}.sha256

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find ./artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Generate release notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # F.I.R.E. ${{ github.event.release.tag_name }}
          
          Full Intensity Rigorous Evaluation - PC Test Bench
          
          ## What's Changed
          View the full changelog at: https://github.com/mscrnt/project_fire/compare/${{ github.event.release.target_commitish }}...${{ github.event.release.tag_name }}
          
          ## Downloads
          
          This release includes both CLI and GUI applications:
          - **bench** - Command-line interface
          - **fire-gui** - Graphical user interface (Windows, Linux, macOS Intel)
          
          ### Installation
          
          #### Windows
          1. Download \`fire-${{ github.event.release.tag_name }}-windows-amd64.zip\`
          2. Extract the archive
          3. Run \`fire-gui.exe\` for the GUI or \`bench.exe\` for CLI
          
          #### Linux
          \`\`\`bash
          wget https://github.com/mscrnt/project_fire/releases/download/${{ github.event.release.tag_name }}/fire-${{ github.event.release.tag_name }}-linux-amd64.tar.gz
          tar -xzf fire-${{ github.event.release.tag_name }}-linux-amd64.tar.gz
          cd fire-${{ github.event.release.tag_name }}-linux-amd64
          ./fire-gui  # For GUI
          ./bench     # For CLI
          \`\`\`
          
          #### macOS
          \`\`\`bash
          wget https://github.com/mscrnt/project_fire/releases/download/${{ github.event.release.tag_name }}/fire-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz
          tar -xzf fire-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz
          cd fire-${{ github.event.release.tag_name }}-darwin-amd64
          ./fire-gui  # For GUI (Intel Macs only)
          ./bench     # For CLI
          \`\`\`
          
          ## Checksums
          Verify your download with the provided SHA256 checksums.
          EOF

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all binaries and checksums
          for file in ./release/*; do
            if [ -f "$file" ]; then
              echo "Uploading $(basename "$file")"
              gh release upload "${{ github.event.release.tag_name }}" "$file" --clobber
            fi
          done